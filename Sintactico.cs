using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Compilador
{
    class Sintactico
    {
        public List<Error> listaError; // lista de errores

        public List<Token> listaTokens;  // va ser una copia de la lista de tokens original   ***** COLA  *****

        private int[] listaSintactico = new int[100]; // analizador sintactico LIFO    **** PILA *****

        public bool error = false; // bandera de errores

        bool revision = false;   // bandera para decidir si sigo analisando o me salgo.

        int punteroLexico = 0;      // punteros de la lista de tokens y de la lista del analizador sintactico
        int punteroSintactico = 1;

        int intentosRecuperar;
        TipoRepecuracion tipoRecuperacion;
        enum TipoRepecuracion
        {
            Ninguna,
            Falta,
            Sobra,
            Diferentes,
            Urgencia,
            NoMas
        }

        #region semantico

        /// <summary>
        /// SEMANTICO
        /// </summary>
        TipoSemantico swSemantico;
        public List<Token> listenerSemantico = new List<Token>();
        enum TipoSemantico
        {
            Ninguno,

            ClaseIN,
            ClassOUT,

            HerenciaIN,
            HerenciaOUT,

            ParametrosIN,
            ParametrosOUT,

            MetodoIN,
            MetodoOUT,

            AtributosIN,
            ATributosOUT,

            VariablesIN,
            VariablesOUT,

            AsignacionIN,
            AsignacionOUT

        }

        #endregion


        // tabla de analisis sintactico.
        public int[,] MatrizTransicionSintantico = new int[,]
      {
                                    //   id -1   ent    deci   cadena   caracte  + -6    - -7    * -8    / -9    == -11  != -12  < -13   > -14   <= -15  >= -16  && -17  || -18  ! -19   ++ -20  -- -21  += -22  -= -23  *= -24  /= -25  ( -26   ) -27   { -28   } -29   [ -30   ] -31   , -32   ; -33	: -34	? -35	= -36	. -37	abstract bool  break 	byte 	case 	catch 	char  class const 	decimal	default   do   double 	else 	false	float 	for 	foreach	 if -68	 in -69	 int 	 is -71	long 	 new 	null 	object private -76	protected -77	public -78	ref -79	return -80	sealed -81	short -82	sizeof -83	static -84	string -85	switch -86	this -87	true -88	try -89	typeof -90	using -91	void -92	while -93	namespace -94	system -95	lambda -96	console -97	read -98	write -99	$
            /*<s>::=1000*/              {},
            /*<programa>::=1001*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	2,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	2,	2,	2,	-600,	-600,	2,	-600,	-600,	2,	-600,	-600,	-600,	-600,	-600,	-600,	2,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<librerias>::=1002*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	4,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	4,	4,	4,	-600,	-600,	4,	-600,	-600,	4,	-600,	-600,	-600,	-600,	-600,	-600,	3,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	                                                                                                                     -600},
            /*<lib>::=1003	*/	        {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	5,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<lib1>::=1004	*/	        {-600,	-600,	-600,	7,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	6,	-600,	-600,	-600,	-600,	-600},
            /*<clases>::=1005*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	8,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	8,	8,	8,	-600,	-600,	8,	-600,	-600,	8,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<clases1>::=1006	*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	9,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	9,	9,	9,	-600,	-600,	9,	-600,	-600,	9,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	10},
            /*<clase>::=1007*/          {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	11,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	11,	11,	11,	-600,	-600,	11,	-600,	-600,	11,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<herencia>::=1008*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	12,	    -600,	-600,	-600,	-600,	-600,	13,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<acceso>::=1009*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	14,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	16,	18,	15,	-600,	-600,	19,	-600,	-600,	17,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<miembros>::= 1010*/	    {21,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	20,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	21,	-600,	-600,	-600,	-600,	21,	-600,	-600,	-600,	-600,	-600,	21,	-600,	-600,	21,	-600,	-600,	-600,	-600,	21,	-600,	-600,	-600,	-600,	-600,	21,	21,	21,	-600,	-600,	21,	-600,	-600,	21,	21,	-600,	-600,	-600,	-600,	-600,	-600,	21,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<miembro>::=1011*/		{22,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	22,	-600,	-600,	-600,	-600,	22,	-600,	-600,	-600,	-600,	-600,	22,	-600,	-600,	22,	-600,	-600,	-600,	-600,	22,	-600,	-600,	-600,	-600,	-600,	22,	22,	22,	-600,	-600,	22,	-600,	-600,	22,	22,	-600,	-600,	-600,	-600,	-600,	-600,	22,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<metatribcon>::=1012*/    {23,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	23,	-600,	-600,	-600,	-600,	23,	-600,	-600,	-600,	-600,	-600,	23,	-600,	-600,	23,	-600,	-600,	-600,	-600,	23,	-600,	-600,	-600,	-600,	-600,	23,	23,	23,	-600,	-600,	23,	-600,	-600,	23,	23,	-600,	-600,	-600,	-600,	-600,	-600,	23,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<metatribcon1>::=1013*/	{26,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	25,	-600,	-600,	-600,	-600,	25,	-600,	-600,	-600,	-600,	-600,	25,	-600,	-600,	25,	-600,	-600,	-600,	-600,	25,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	25,	-600,	-600,	-600,	-600,	-600,	-600,	24,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<metatribcon2>::=1014*/	{27,	27,	    27,	    27,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	28,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<parametros>::=1015*/	    {30,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	29,	-600,	-600,	-600,	-600,	29,	-600,	-600,	-600,	-600,	-600,	29,	-600,	-600,	29,	-600,	-600,	-600,	-600,	29,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	29,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<parametro>::=1016*/		{-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	31,	-600,	-600,	-600,	-600,	32,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<asig1>::= 1016*/		    {33,	33,	    33,	    33,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<exp>::=1017*/		    {34,	34,	    34,	    34,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<factor>::=1018*/		    {35,	36,	    37,	    38,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<termino>::= 1019*/	    {-600,	-600,	-600,	-600,	-600,	40,	    40,	    40,	    40,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	39,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<operarit>::= 1020*/		{-600,	-600,	-600,	-600,	-600,	41,	    42,	    43,	    44,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<sentencias>::=1021*/		{45,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	45,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	45,	-600,	-600,	-600,	-600,	45,	-600,	-600,	-600,	-600,	45,	45,	-600,	-600,	45,	45,	-600,	45,	-600,	45,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	45,	45,	-600,	-600,	-600,	-600,	-600,	-600,	45,	-600,	-600,	-600,	45,	-600,	-600,	-600},
            /*<sentencia>::= 1022*/		{55,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	46,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	54,	-600,	-600,	-600,	-600,	54,	-600,	-600,	-600,	-600,	50,	54,	-600,	-600,	54,	48,	-600,	47,	-600,	54,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	54,	51,	-600,	-600,	-600,	-600,	-600,	-600,	49,	-600,	-600,	-600,	52,	-600,	-600,	-600},
            /*<if>::= 1023*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	57,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<condicional>::= 1024*/	{58,	58,	    58,	    58,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	58,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	58,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<factorCond>::= 1025*/	{61,	61,	    61,	    61,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	59,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	60,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<oprel>::= 1026*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	66,	    67,	    63,	    62,	    65,	    64,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,9	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<terminoCond>::= 1027*/   {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	68,	    68,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	69,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<oplog>::= 1028*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	70,	    71,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<else>::= 1029*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	72,	    600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	73,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<else1>::= 1030*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	74,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	75,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<for>::= 1031*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	76,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<decasig>::= 1032*/		{78,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	77,	-600,	-600,	-600,	-600,	77,	-600,	-600,	-600,	-600,	-600,	77,	-600,	-600,	77,	-600,	-600,	-600,	-600,	77,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	77,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<declaracion>::= 1033*/	{-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	79,	-600,	-600,	-600,	-600,	79,	-600,	-600,	-600,	-600,	-600,	79,	-600,	-600,	79,	-600,	-600,	-600,	-600,	79,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	79,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<multiples>::= 1034*/		{80,	80,	    80,	    80,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	81,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<asignacion>::= 1035*/	{82,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<incremento>::= 1036*/	{-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	84,	    85,	    83,	    83,	    83,	    83,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	83,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<opasig>::= 1037*/		{-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	87,	    88,	    89,	    90,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	86,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<while>::= 1038*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	91,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<do>::= 1039*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	92,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<leer>::= 1040*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	93,	-600,	-600,	-600,	-600},
            /*<escribir>::= 1041*/		{-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	94,	-600,	-600,	-600,	-600},
            /*<invocar>::= 1042*/	    {95,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<obj>::= 1043*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	96,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	97,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<paramobj>::= 1044*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	98,	    -600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<paramobj1>::= 1045*/		{-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	100,	-600,	-600,	101,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,},
            /*<tipo>::= 1046*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	107,	-600,	-600,	-600,	-600,	105,	-600,	-600,	-600,	-600,	-600,	104,	-600,	-600,	107,	-600,	-600,	-600,	-600,	102,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	103,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<switch>::= 1047*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	108,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<cases>::= 1048*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	109,	-600,	-600,	-600,	-600,	-600,	110,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<default>::= 1049*/	    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	112,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	111,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600},
            /*<case>::= 1050*/		    {-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	113,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600,	-600}


      };

        /// <summary>
        /// reglas BNF
        /// </summary>
        public int[,] RepositorioReglas = new int[,]
        {
            /*1    <s>::= */ { 1001,-100,0,0,0,0,0,0,0,0,0,0 },
            /*2   <programa>::=*/ {1005, 1002,-100,0,0,0,0,0,0,0,0,0},
            /*3   <librerias>::=*/{1002, 1003,-100,0,0,0,0,0,0,0,0,0},
            /*4   <librerias>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*5   <lib>::=*/ {-33,1004, -91,-100,0,0,0,0,0,0,0,0},
            /*6   <lib1>::=*/ {-1, -37, -95,-100,0,0,0,0,0,0,0,0},
            /*7   <lib1>::=*/ {-1,-100,0,0,0,0,0,0,0,0,0,0},
            /*8   <clases>::=*/ {1006, 1007,-100,0,0,0,0,0,0,0,0,0},
            /*9   <clases1>::=*/ {1006, 1007,-100,0,0,0,0,0,0,0,0,0},
            /*10  <clases1>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*11  <clase>::=*/ {-29, 1010, -28, 1008, -1, -57, 1009,-100,0,0,0,0},
            /*12  <herencia>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*13  <herencia>::=*/ {-1, -34,-100,0,0,0,0,0,0,0,0,0},
            /*14  <acceso>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*15  <acceso>::=*/ {-78,-100,0,0,0,0,0,0,0,0,0,0},
            /*16  <acceso>::=*/ {-76,-100,0,0,0,0,0,0,0,0,0,0},
            /*17  <acceso>::=*/ {-84,-100,0,0,0,0,0,0,0,0,0,0},
            /*18  <acceso>::=*/ {-77,-100,0,0,0,0,0,0,0,0,0,0},
            /*19  <acceso>::=*/ {-81,-100,0,0,0,0,0,0,0,0,0,0},
            /*20  <miembros>::=*/  {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*21  <miembros>::=*/ {1010, 1011,-100,0,0,0,0,0,0,0,0,0},
            /*22  <miembro>::=*/ {1012,-100,0,0,0,0,0,0,0,0,0,0},
            /*23  <metatribcon>::=*/ {1013, 1009,-100,0,0,0,0,0,0,0,0,0},
            /*24  <metatribcon1>::=*/ {-29, 1021, -28, -27, 1015, -26, -1, -92,-100,0,0,0},
            /*25  <metatribcon1>::=*/ {1014, -1, 1046,-100,0,0,0,0,0,0,0,0},
            /*26  <metatribcon1>::=*/ {-29, 1021, -28, -27, 1015, -26, -1,-100,0,0,0,0},
            /*27  <metatribcon2>::=*/ {-33, 1016,-100,0,0,0,0,0,0,0,0,0},
            /*28  <metatribcon2>::=*/ {-29, 1017, -80, 1021, -28, -27, 1015, -26,-100,0,0,0},
            /*29  <parametros>::=*/ {1016, -1, 1046,-100,0,0,0,0,0,0,0,0},
            /*30  <paramaetros>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*31  <parametro>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*32  <parametro>::=*/ {1016, -1, 1046, -32,-100,0,0,0,0,0,0,0},
            /*33  <asig1>::=*/ {1017,-100,0,0,0,0,0,0,0,0,0,0},
            /*34  <exp>::=*/ {1019, 1018,-100,0,0,0,0,0,0,0,0,0},
            /*35  <factor>::=*/ {-1,-100,0,0,0,0,0,0,0,0,0,0},
            /*36  <factor>::=*/ {-2,-100,0,0,0,0,0,0,0,0,0,0},
            /*37  <factor>::=*/ {-3,-100,0,0,0,0,0,0,0,0,0,0},
            /*38  <factor>::=*/ {-4,-100,0,0,0,0,0,0,0,0,0,0},
            /*39  <termino>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*40  <termino>::=*/ {1017, 1020,-100,0,0,0,0,0,0,0,0,0},
            /*41  <operarit>::=*/ {-6,-100,0,0,0,0,0,0,0,0,0,0},
            /*42  <operarit>::=*/ {-7,-100,0,0,0,0,0,0,0,0,0,0},
            /*43  <operarit>::=*/ {-9,-100,0,0,0,0,0,0,0,0,0,0},
            /*44  <operarit>::=*/ {-8,-100,0,0,0,0,0,0,0,0,0,0},
            /*45  <sentencias>::=*/ {1021, 1022,-100,0,0,0,0,0,0,0,0,0},
            /*46  <sentencias>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*47  <sentencia>::=*/ {1023,-100,0,0,0,0,0,0,0,0,0,0},
            /*48  <sentencia>::=*/ {1031,-100,0,0,0,0,0,0,0,0,0,0},
            /*49  <sentencia>::=*/ {1038,-100,0,0,0,0,0,0,0,0,0,0},
            /*50  <sentencia>::=*/ {1039,-100,0,0,0,0,0,0,0,0,0,0},
            /*51  <sentencia>::=*/ {1047,-100,0,0,0,0,0,0,0,0,0,0},
            /*52  <sentencia>::=*/ {1040,-100,0,0,0,0,0,0,0,0,0,0},
            /*53  <sentencia>::=*/ {1041,-100,0,0,0,0,0,0,0,0,0,0},
            /*54  <sentencia>::=*/ {1033,-100,0,0,0,0,0,0,0,0,0,0},
            /*55  <sentencia>::=*/ {1035,-100,0,0,0,0,0,0,0,0,0,0},
            /*56  <sentencia>::=*/ {1042,-100,0,0,0,0,0,0,0,0,0,0},
            /*57  <if>::=*/ {1029, -29, 1021, -28, -27, 1024, -26, -68,-100,0,0,0},
            /*58  <condicional>::=*/ {1027, 1025,-100,0,0,0,0,0,0,0,0,0},
            /*59  <factorCond>::=*/ {-88,-100,0,0,0,0,0,0,0,0,0,0},
            /*60  <factorCond>::=*/ {-64,-100,0,0,0,0,0,0,0,0,0,0},
            /*61  <factorCond>::=*/ {1017, 1026, 1017,-100,0,0,0,0,0,0,0,0},
            /*62  <oprel>::=*/ {-14,-100,0,0,0,0,0,0,0,0,0,0},
            /*63  <oprel>::=*/ {-13,-100,0,0,0,0,0,0,0,0,0,0},
            /*64  <oprel>::=*/ {-16,-100,0,0,0,0,0,0,0,0,0,0},
            /*65  <oprel>::=*/ {-15,-100,0,0,0,0,0,0,0,0,0,0},
            /*66  <oprel>::=*/ {-11,-100,0,0,0,0,0,0,0,0,0,0},
            /*67  <oprel>::=*/ {-12,-100,0,0,0,0,0,0,0,0,0,0},
            /*68  <terminoCond>::=*/ {1024, 1028,-100,0,0,0,0,0,0,0,0,0},
            /*69  <terminoCond>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*70  <oplog>::=*/ {-17,-100,0,0,0,0,0,0,0,0,0,0},
            /*71  <oplog>::=*/ {-19,-100,0,0,0,0,0,0,0,0,0,0},
            /*72  <else>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*73  <else>::=*/ {1030, -63,-100,0,0,0,0,0,0,0,0,0},
            /*74  <else1>::=*/ {-29, 1021, -28,-100,0,0,0,0,0,0,0,0},
            /*75  <else1>::=*/ {1023,-100,0,0,0,0,0,0,0,0,0,0},
            /*76  <for>::=*/ {-29, 1021, -28, -27, 1035, -33, 1024, -33, 1032, -26, -66,-100},
            /*77  <decasig>::=*/ {1033,-100,0,0,0,0,0,0,0,0,0,0},
            /*78  <decasig>::=*/ {1035,-100,0,0,0,0,0,0,0,0,0,0},
            /*79  <declaracion>::=*/ {1016, 1034, -1, 1046,-100,0,0,0,0,0,0,0},
            /*80  <multiples>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*81  <multiples>::=*/ {1034, -1, -32,-100,0,0,0,0,0,0,0,0},
            /*82  <asignacion>::=*/ {1036, -1,-100,0,0,0,0,0,0,0,0,0},
            /*83  <incremento>::=*/ {1017, 1037,-100,0,0,0,0,0,0,0,0,0},
            /*84  <incremento>::=*/ {-20,-100,0,0,0,0,0,0,0,0,0,0},
            /*85  <incremento>::=*/ {-21,-100,0,0,0,0,0,0,0,0,0,0},
            /*86  <opasig>::=*/ {-36,-100,0,0,0,0,0,0,0,0,0,0},
            /*87  <opasig>::=*/ {-22,-100,0,0,0,0,0,0,0,0,0,0},
            /*88  <opasig>::=*/  {-23,-100,0,0,0,0,0,0,0,0,0,0},
            /*89  <opasig>::=*/  {-24,-100,0,0,0,0,0,0,0,0,0,0},
            /*90  <opasig>::=*/ {-25,-100,0,0,0,0,0,0,0,0,0,0},
            /*91  <while>::=*/ {-29, 1021, -28, -27, 1024, -26, -93,-100,0,0,0,0},
            /*92  <do>::=*/ {-33, -27, 1024, -26, -93, -29, 1021, -28, -61,-100,0,0},
            /*93  <leer>::=*/ {-33, -27, -26, -98, -37, -97,-100,0,0,0,0,0},
            /*94  <escribir>::=*/ {-33, -27, 1017, -26, -98, -37, -97,-100,0,0,0,0},
            /*95  <invocar>::=*/ {-33, -27, 1044, -26, 1043, -1,-100,0,0,0,0,0},
            /*96  <obj>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*97  <obj>::=*/ {-1, -32,-100,0,0,0,0,0,0,0,0,0},
            /*98  <paramobj>::=*/ {1045, 1017,-100,0,0,0,0,0,0,0,0,0},
            /*99  <paramobj>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*100 <paramobj1>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*101 <paramobj1>::=*/ {1017, -32,-100,0,0,0,0,0,0,0,0,0},
            /*102 <tipo>::=*/ {-70,-100,0,0,0,0,0,0,0,0,0,0},
            /*103 <tipo>::=*/ {-85,-100,0,0,0,0,0,0,0,0,0,0},
            /*104 <tipo>::=*/ {-62,-100,0,0,0,0,0,0,0,0,0,0},
            /*105 <tipo>::=*/ {-56,-100,0,0,0,0,0,0,0,0,0,0},
            /*106 <tipo>::=*/ {-65,-100,0,0,0,0,0,0,0,0,0,0},
            /*107 <tipo>::=*/ {-51,-100,0,0,0,0,0,0,0,0,0,0},
            /*108 <switch>::=*/ {-29, 1049, 1048, -28, -27, 1017, -26, -86,-100,0,0,0},
            /*109 <cases>::=*/ {1048, 1050,-100,0,0,0,0,0,0,0,0,0},
            /*110 <cases>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*111 <default>::=*/ {-33, -52, 1021, -34, -60,-100,0,0,0,0,0,0},
            /*112 <default>::=*/ {-96,-100,0,0,0,0,0,0,0,0,0,0},
            /*113 <case>::=*/ {-33, -52, 1021, -34, 1018, -54,-100,0,0,0,0,0},


        };



        /// <summary>
        /// Constructor de la clase, necesita la lista de tokens que genera el lexico
        /// </summary>
        /// <param name="listaTokenLexico">lista de tokens del lexico</param>
        public Sintactico(List<Token> listaTokenLexico)
        {
            //inicializo todo para poder empezar el analisis.
            listaError = new List<Error>();
            //TablaSimbolos.listaErroresSemantico = new List<Error>();
            //TablaSimbolos.TablaSimbolosClase = new Dictionary<object, NodoClase>();

            listaTokens = listaTokenLexico; // copia de la lisat de tokens original
            listaTokens.Add(new Token() { Lexema = "$", Linea = 0, TipoToken = TipoToken.cadena, ValorToken = -101 });

            listaSintactico[0] = -101; // estoy insertando $
            listaSintactico[1] = 1000; // S

            intentosRecuperar = 0;
            tipoRecuperacion = TipoRepecuracion.Ninguna;


        }


        // sintactico        
        public void EjecutarSintactico(List<Token> listaTokens)
        {
            //incializo variables locales necesarias
            int renglon, columna = 0;
            int regla;

            do
            {

                // Escuchador();

                if (listaSintactico[punteroSintactico] < 0)   // el elemento de la lista es un terminal (TOKEN)????
                {
                    if (listaSintactico[punteroSintactico] == -96)// es lamda ese terminal?
                    {
                        listaSintactico[punteroSintactico] = 0;
                        punteroSintactico--;
                    }

                    else if (listaSintactico[punteroSintactico] == listaTokens[punteroLexico].ValorToken)  // los dos elementos son iguales
                    {
                        if (listaSintactico[punteroSintactico] == -101)  // los dos son simbolo final ????$
                        {
                            revision = true;
                            if (error)
                                MessageBox.Show(@"Analisis Sintactico Terminado, Con Errores");
                            else
                                MessageBox.Show(@"Analisis Sintactico Terminado Correctamente");
                            break;

                        }
                        else    //MATCH (elemento)
                        {
                            //CODIDO ESCUCHADOR  ACTIVADO ALGUN MODO IN
                            //if (swSemantico != TipoSemantico.Ninguno)
                            //    CodigoSemantico();

                            listaSintactico[punteroSintactico] = 0;
                            punteroLexico++;
                            punteroSintactico--;
                            //VerificarRecuperacion();
                        }
                    }
                    else  // si los dos terminales de la lista token y de la lista sintactico no son iguales
                    {
                        NuevoError(listaTokens, ref revision, 1);
                    }
                }
                else  // NUMERO POSITIVO : es la parte de traerme la regla del repositorio con ayuda de la matriz
                {
                    renglon = BuscarRenglon(listaSintactico[punteroSintactico]);
                    columna = BuscarColumna(listaTokens[punteroLexico].ValorToken);

                    regla = MatrizTransicionSintantico[renglon, columna];

                    if (regla > 0)  // llamamos a la insersion de reglas.
                    {
                        InsertarRegla(regla);
                        //VerificarRecuperacion();
                    }
                    else  // ejecutarr el manejo de errores
                    {
                        if (intentosRecuperar < 1)
                        {
                            tipoRecuperacion = TipoRepecuracion.Sobra;
                        }
                        NuevoError(listaTokens, ref revision, regla);
                    }
                }
           } while (revision != true);

        }


        /// <summary>
        /// inserto las reglas al LIFO (estructa sintactica)
        /// </summary>
        /// <param name="regla"></param>
        private void InsertarRegla(int regla)
        {
            int i = 0;
            do
            {
                listaSintactico[punteroSintactico] =
                    RepositorioReglas[regla - 1, i];
                punteroSintactico++;
                i++;

            } while (RepositorioReglas[regla - 1, i] != -100);
            punteroSintactico--;
        }

        private int BuscarColumna(int token)
        {
            switch (token)
            {
                case -1:/*id*/
                    return 0;
                case -2: /*enteros*/
                    return 1;
                case -3: /*decimal*/
                    return 2;
                case -4: /*cadena*/
                    return 3;
                case -5: /*caracteres*/
                    return 4;
                case -6: /*+*/
                    return 5;
                case -7: /*-*/
                    return 6;
                case -8: /***/
                    return 7;
                case -9: /*/*/
                    return 8;
                case -11: /*==*/
                    return 9;
                case -12: /*!=*/
                    return 10;
                case -13: /*<*/
                    return 11;
                case -14: /*>*/
                    return 12;
                case -15: /*<=*/
                    return 13;
                case -16: /*>=*/
                    return 14;
                case -17: /*&&*/
                    return 15;
                case -18: /*||*/
                    return 16;
                case -19: /*!*/
                    return 17;
                case -20: /*++*/
                    return 18;
                case -21: /*--*/
                    return 19;
                case -22: /*+=*/
                    return 20;
                case -23: /*-=*/
                    return 21;
                case -24: /*asterisco=*/
                    return 22;
                case -25: /*/*/
                    return 23;
                case -26: /*(*/
                    return 24;
                case -27: /*)*/
                    return 25;
                case -28: /*{*/
                    return 26;
                case -29: /*{{*/
                    return 27;
                case -30: /*[*/
                    return 28;
                case -31: /*[[*/
                    return 29;
                case -32: /*,*/
                    return 30;
                case -33: /*;*/
                    return 31;
                case -34: /*:*/
                    return 32;
                case -35: /*?*/
                    return 33;
                case -36: /*=*/
                    return 34;
                case -37: /*.*/
                    return 35;
                case -50: /*abstract*/
                    return 36;
                case -51: /*bool*/
                    return 37;
                case -52: /*break*/
                    return 38;
                case -53: /*byte*/
                    return 39;
                case -54: /*case*/
                    return 40;
                case -55: /*catch*/
                    return 41;
                case -56: /*char*/
                    return 42;
                case -57: /*class*/
                    return 43;
                case -58: /*const*/
                    return 44;
                case -59: /*decimal*/
                    return 45;
                case -60: /*default*/
                    return 46;
                case -61: /*do*/
                    return 47;
                case -62: /*double*/
                    return 48;
                case -63: /*else*/
                    return 49;
                case -64: /*false*/
                    return 50;
                case -65: /*float*/
                    return 51;
                case -66: /*for*/
                    return 52;
                case -67: /*foreach*/
                    return 53;
                case -68: /*if*/
                    return 54;
                case -69: /*in*/
                    return 55;
                case -70: /*int*/
                    return 56;
                case -71: /*is*/
                    return 57;
                case -72: /*long*/
                    return 58;
                case -73: /*new*/
                    return 59;
                case -74: /*null*/
                    return 60;
                case -75: /*object*/
                    return 61;
                case -76: /*private*/
                    return 62;
                case -77: /*protected*/
                    return 63;
                case -78: /*public*/
                    return 64;
                case -79: /*ref*/
                    return 65;
                case -80: /*return*/
                    return 66;
                case -81: /*sealed*/
                    return 67;
                case -82: /*short*/
                    return 68;
                case -83: /*sizeof*/
                    return 69;
                case -84: /*static*/
                    return 70;
                case -85: /*string*/
                    return 71;
                case -86: /*switch*/
                    return 72;
                case -87: /*this*/
                    return 73;
                case -88: /*true*/
                    return 74;
                case -89: /*try*/
                    return 75;
                case -90: /*typeof*/
                    return 76;
                case -91: /*using*/
                    return 77;
                case -92: /*void*/
                    return 78;
                case -93: /*while*/
                    return 79;
                case -94: /*namespace*/
                    return 80;
                case -95: /*system*/
                    return 81;
               // case -96: /*lambda*/
               //     return 82;
                case -97: /*console*/
                    return 83;
                case -98: /*read*/
                    return 84;
                case -99: /*write*/
                    return 85;
                case -100: /*write*/
                    return 86;
                default:
                    return 11;


            }
        }

        private int BuscarRenglon(int regla)
        {
            switch (regla)
            {
                case 1000: /*s*/
                    return 0;

                case 1001: /*programa*/
                    return 1;

                case 1002: /*librerias*/
                    return 2;

                case 1003: /*lib*/
                    return 3;

                case 1004: /*lib1*/
                    return 4;

                case 1005: /*clases*/
                    return 5;

                case 1006: /*clases1*/
                    return 6;

                case 1007: /*clase*/
                    return 7;

                case 1008: /*herencia*/
                    return 8;

                case 1009: /*acceso*/
                    return 9;

                case 1010: /*miembros*/
                    return 10;

                case 1011: /*miembro*/
                    return 11;

                case 1012: /*metatribcon*/
                    return 12;

                case 1013: /*metatribcon1*/
                    return 13;

                case 1014: /*metatribcon2*/
                    return 14;

                case 1015: /*parametros*/
                    return 15;

                case 1016: /*parametro*/
                    return 16;

                case 1017: /*asig1*/
                    return 17;

                case 1018: /*factor*/
                    return 18;

                case 1019: /*termino*/
                    return 19;

                case 1020: /*operarit*/
                    return 20;

                case 1021: /*sentencias*/
                    return 21;

                case 1022: /*sentencia*/
                    return 22;

                case 1023: /*if*/
                    return 23;

                case 1024: /*condicional*/
                    return 24;

                case 1025: /*factorCond*/
                    return 25;

                case 1026: /*oprel*/
                    return 26;

                case 1027: /*terminoCond*/
                    return 27;

                case 1028: /*oplog*/
                    return 28;

                case 1029: /*else*/
                    return 29;

                case 1030: /*else1*/
                    return 30;

                case 1031: /*for*/
                    return 31;

                case 1032: /*decasig*/
                    return 32;

                case 1033: /*declaracion*/
                    return 33;

                case 1034: /*multiples*/
                    return 34;

                case 1035: /*asignacion*/
                    return 35;

                case 1036: /*incremento*/
                    return 36;

                case 1037: /*opasig*/
                    return 37;

                case 1038: /*while*/
                    return 38;

                case 1039: /*do*/
                    return 39;

                case 1040: /*leer*/
                    return 40;

                case 1041: /*escribir*/
                    return 41;

                case 1042: /*invocar*/
                    return 42;

                case 1043: /*obj*/
                    return 43;

                case 1044: /*paramobj*/
                    return 44;

                case 1045: /*paramobj1*/
                    return 45;

                case 1046: /*tipo*/
                    return 46;

                case 1047: /*switch*/
                    return 47;

                case 1048: /*cases*/
                    return 48;

                case 1049: /*default*/
                    return 49;

                case 1050: /*case*/
                    return 50;

                default:
                    throw new Exception("error de logica");
            }

        }



        #region VERIFICACION DE ERRORES

        private void NuevoError(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejodeErrores(tipo, listaTokens[punteroLexico].Linea);
            listaError.Add(nuevoError);
            revision = true;
            //   Recuperar(ref revision, ref tipoRecuperacion);

        }

        private void VerificarRecuperacion()
        {
            if (tipoRecuperacion != TipoRepecuracion.Ninguna)
            {
                tipoRecuperacion = TipoRepecuracion.Ninguna;
                intentosRecuperar = 0;
            }
        }

        private Error ManejodeErrores(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case 1:  // cuando son terminales 
                    mensajeError = "se esperaba el simbolo: " + listaSintactico[punteroSintactico];
                    break;
                case -600:
                    mensajeError = "Error de Sintaxis.";
                    break;
                case -606:
                    mensajeError = "se esperaba una estructura de clase o librería.";
                    break;
                case -601:
                    mensajeError = "se esperaba una estructura de librería. ";
                    break;
                case -602:
                    mensajeError = "se esperaba una estructura de herencia ";
                    break;
                case -603:
                    mensajeError = "se esperaba un miembro de una clase ";
                    break;
                case -604:
                    mensajeError = "se esperaba una estructura de clase ";
                    break;
                case -605:
                    mensajeError = "se esperaba un Alcance ";
                    break;

                default:
                    break;
            }
            return new Error() { Codigo = error, MensajeError = mensajeError, TipoError = tipoError.Sintactico, Linea = linea };

        }
        private void Recuperar(ref bool revision, ref TipoRepecuracion tipo)
        {
            if (intentosRecuperar > 3)
            {
                tipo = TipoRepecuracion.NoMas;
            }

            intentosRecuperar++;

            switch (tipo)
            {
                case TipoRepecuracion.Ninguna:
                    punteroSintactico--;
                    tipo++;
                    break;
                case TipoRepecuracion.Falta:
                    punteroSintactico--;  // muevo sintactio
                    if (intentosRecuperar == 3)
                    {
                        punteroSintactico += 3;
                        tipo = TipoRepecuracion.Diferentes;
                    }
                    break;
                case TipoRepecuracion.Sobra:
                    if (intentosRecuperar == 3)
                    {
                        punteroLexico -= 2;
                        tipo = TipoRepecuracion.Falta;
                    }
                    punteroLexico++;  // muevo lexico
                    break;
                case TipoRepecuracion.Diferentes:
                    punteroLexico++;   // muevo ambos
                    punteroSintactico--;
                    break;

                default:
                    revision = true;
                    MessageBox.Show(@"Analisis Sintactico no se recupero, paro fulminante");
                    break;
            }
        }


        #endregion


        private void Escuchador()
        {
            switch (listaSintactico[punteroSintactico])
            {
                case 1007:  // regla de la clase 
                    swSemantico = TipoSemantico.ClaseIN; //{
                    break;

                //case 1008:  // regla de la metodos 
                //    swSemantico = TipoSemantico.MetodoIN;  //{
                //    break;

                //case 1009:  // regla de la atributos 
                //    swSemantico = TipoSemantico.AtributosIN; //;
                //    break;

                //case 1010:  // regla de la parametros 
                //    swSemantico = TipoSemantico.ParametrosIN; //;
                //    break;

                //case 1020:
                //    swSemantico = TipoSemantico.AsignacionIN; //;
                //    break;
                default:
                    break;
            }
        }

        //private void CodigoSemantico()
        //{

        //    //CAPTURA el token de sintactico a la lista temporal
        //    listenerSemantico.Add(listaTokens[punteroLexico]);

        //    if (listaTokens[punteroLexico].ValorToken == -8 /* { */ && swSemantico == TipoSemantico.ClaseIN)
        //    {
        //        swSemantico = TipoSemantico.ClassOUT;
        //    }
        //    if (listaTokens[punteroLexico].ValorToken == -8 /* { */ && swSemantico == TipoSemantico.MetodoIN)
        //    {
        //        swSemantico = TipoSemantico.MetodoOUT;
        //    }

        //    if (listaTokens[punteroLexico].ValorToken == -15 /* ) */ && swSemantico == TipoSemantico.ParametrosIN)
        //    {
        //        swSemantico = TipoSemantico.ParametrosOUT;
        //    }


        //    //desmenuzando ya la lista de tokens temporal para una clase
        //    if (swSemantico == TipoSemantico.ClassOUT)
        //    {
        //        int puntero2 = 0;
        //        NodoClase minodoClase = new NodoClase();
        //        if (listenerSemantico[puntero2].ValorToken < -50 && listenerSemantico[puntero2].ValorToken > -56)
        //        {
        //            switch (listenerSemantico[puntero2].ValorToken)
        //            {
        //                case -51:
        //                    minodoClase.MiAlcance = Alcance.Public;
        //                    break;
        //                case -52:
        //                    minodoClase.MiAlcance = Alcance.Private;
        //                    break;
        //                case -53:
        //                    minodoClase.MiAlcance = Alcance.Static;
        //                    break;
        //                case -54:
        //                    minodoClase.MiAlcance = Alcance.Protected;
        //                    break;
        //                case -55:
        //                    minodoClase.MiAlcance = Alcance.Sealed;
        //                    break;
        //                default:
        //                    break;
        //            }
        //            puntero2++;
        //        }
        //        else
        //        {
        //            minodoClase.MiAlcance = Alcance.Private;
        //        }
        //        puntero2++; // class
        //        minodoClase.Lexema = listenerSemantico[puntero2].Lexema;
        //        puntero2++; //:
        //        if (listenerSemantico[puntero2].ValorToken == -12) //:
        //        {
        //            puntero2++;
        //            minodoClase.Herencia = listenerSemantico[puntero2].Lexema;
        //            //compruebo la existencia de la clase heredar
        //            TablaSimbolos.ExisteClaseHeredada(listenerSemantico[puntero2].Lexema);
        //            puntero2++;
        //        }

        //        if (listenerSemantico[puntero2].ValorToken == -8) //{
        //        {

        //            minodoClase.RenglonDeclaracion = listenerSemantico[puntero2].Linea;
        //            //despues de termiar de analizar el codigo entonces insertamos clase.
        //            TablaSimbolos.InsertarNodoClase(minodoClase);

        //            listenerSemantico = new List<Token>();
        //            swSemantico = TipoSemantico.Ninguno;
        //            puntero2 = 0;
        //        }
        //    }
        //    //desmenuzar lista de tokens temporal para crear un nodo atributo
        //    if (swSemantico == TipoSemantico.ATributosOUT)
        //    {
        //        // insertar un modo atributo
        //    }

        //}
    }
}
